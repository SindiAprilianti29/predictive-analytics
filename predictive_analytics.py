# -*- coding: utf-8 -*-
"""predictive_analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-w6QA0exkKahpYrnZ0DfM6s8I0vN6fdj

# Data Collection
"""

import kagglehub
import shutil
import os
import pandas as pd

dataset_path = kagglehub.dataset_download("atharvasoundankar/mental-health-and-digital-behavior-20202024")
print(os.listdir(dataset_path))

"""Download dataset dari kaggle, dengan judul "Mental Health and Digital Behaviour (2020-2024)"
"""

file_name = "mental_health_digital_behavior_data.csv"
source_path = os.path.join(dataset_path, file_name)
target_path = os.path.join("/content", file_name)
shutil.copy(source_path, target_path)

print( target_path)

df = pd.read_csv(target_path)

"""Menyalin dataset lalu membacanya ke dalam df.

# Import Library
"""

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LinearRegression

"""Mengimpor library yang dibutuhkan

# EDA
"""

df.shape

"""Terdapat 500 entri data dengan 9 fitur"""

df.head()

"""Menampilkan beberapa contoh data. Fitur yang ada dalam dataset adalah daily_screen_time_min, num_app_switches, sleep_hours, notification_count, social_media_time_min, focus_score, mood_score, anxiety_lavel, dan digital_wellbeing_score."""

df.describe()

"""Menampilkan statistik deskriptif dari dataset untuk setiap fitur"""

df.isnull().sum()

"""Terlihat bahwa tidak ada missing values dalam dataset"""

df.duplicated().sum()

"""Terlihat bahwa tidak ada data duplikat dalam dataset"""

# Loop setiap kolom numerik dan tampilkan boxplot-nya
for col in df.select_dtypes(include='number').columns:
    plt.figure(figsize=(6, 3))
    sns.boxplot(x=df[col])
    plt.title(f'Boxplot of {col}')
    plt.tight_layout()
    plt.show()

"""Semua fitur, kecuali focus_score (label) memiliki outlier."""

# Menampilkan histogram untuk melihat distribusi data
df.hist(bins=50, figsize=(20,15))
plt.show()

"""Hampir semua fitur memiliki data dengan distribusi normal, mayoritas datanya berada di sekitar rata-rata, kecuali pada fitur anxiety_level yang datanya menjorok ke kiri, menunjukkan bahwa mayoritas orang memiliki anxiety level yang tinggi."""

plt.figure(figsize=(10, 8))
cols = df.select_dtypes(include='number').columns
correlation_matrix = df[cols].corr().round(2)

# Untuk menge-print nilai di dalam kotak, gunakan parameter anot=True
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix ", size=20)

"""Beberapa fitur yang memiliki korelasi negatif dengan focus_score diantaranya notification_count (-0.34), daily_screen_time_min (-0.31), dan num_app_switches (-0.28), menunjukkan bahwa ketika ketiga fitur ini meningkat, maka focus_score akan cenderung menurun. Sedangkan digital_wellbeing_score menunjukkan nilai 0.41 terhadap focus_Score menunjukkan fitur ini memiliki korelasi positif. Sedangkan fitur lain nilainya tidak terlalu signifikan.

# Data Preparation
"""

# Hitung Q1, Q3, dan IQR hanya untuk kolom numerikal
cols = df.select_dtypes(include='number').columns
Q1 = df[cols].quantile(0.25)
Q3 = df[cols].quantile(0.75)
IQR = Q3 - Q1
# Buat filter untuk menghapus baris yang mengandung outlier di kolom numerikal
filter_outliers = ~((df[cols] < (Q1 - 1.5 * IQR)) |
                     (df[cols] > (Q3 + 1.5 * IQR))).any(axis=1)
# Terapkan filter ke dataset asli (termasuk kolom non-numerikal)
df = df[filter_outliers]
# Cek ukuran dataset setelah outlier dihapus
df.shape

"""Menghapus outlier dengan metode IQR, sehingga hanya tersisa 457 entri data"""

# Train test split
X = df.drop(["focus_score"],axis =1)
y = df["focus_score"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 123)

"""Menetapkan fitur focus_score sebagai target. Membagi data menjadi data train dan data test, dengan proporsi 80 data train, 20 data test."""

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""Menampilkan jumlah sample pada keseluruhan dataset sebesar 457, pada data train sebanyak 365, dan data test 92"""

# standardisasi
numerical_features = df.select_dtypes(include='number').columns.drop('focus_score').tolist()
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

"""Melakukan normalisasi dengan StandardScaler agar setiap fitur memiliki rata rata 0 dan standar deviasi 1"""

X_train[numerical_features].describe().round(4)

"""melihat statistik deskriptif dari data X_train dengan pembulatan 4 angka di belakang koma

# Modeling
"""

# Siapkan dataframe untuk analisis model
models = pd.DataFrame(index=['train_mse', 'test_mse'],
                      columns=['RandomForest', 'LinearRegression'])

"""Membuat dataframe untuk analisis model"""

# random forest
RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(X_train, y_train)

models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

"""Membangun model random forest"""

# linear regression
LR = LinearRegression()
LR.fit(X_train, y_train)

models.loc['train_mse','LinearRegression'] = mean_squared_error(y_pred=LR.predict(X_train), y_true=y_train)

"""Membangun model linear regression"""

X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

"""melakukan scaling terhadap fitur numerik pada X_test sehingga memiliki rata-rata=0 dan varians=1

# Evaluasi
"""

# Membuat variabel mse yang isinya adalah dataframe nilai mse data train dan test pada masing-masing algoritma
mse = pd.DataFrame(columns=['train', 'test'], index=['RF','LR'])

# Membuat dictionary untuk setiap algoritma yang digunakan
model_dict = {'RF': RF, 'LR': LR}

# Menghitung nilai MSE pada data train dan test
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3

# Memanggil mse
mse

"""Berdasarkan hasil evaluasi menggunakan metrik Mean Squared Error (MSE), model Linear Regression (LR) menunjukkan performa yang lebih baik dibandingkan Random Forest (RF). Pada data training, MSE LR sebesar 0.000002, jauh lebih rendah dibandingkan MSE RF yang sebesar 0.000028. Hal yang sama juga terlihat pada data testing, dimana LR memiliki MSE 0.000002 sedangkan RF sebesar 0.000178. Nilai MSE yang lebih rendah pada model Linear Regression mengindikasikan bahwa model ini mampu memberikan prediksi yang lebih akurat dan konsisten terhadap skor fokus dibandingkan dengan Random Forest."""

# menampilkan horizontal bar chart dari MSE untuk membandingkan kedua performa model
fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""Visualisasi dari hasil evaluasi MSE (telah dijelaskan di atas)"""

# Membandingkan hasil prediksi dari dua model terhadap satu data uji
prediksi = X_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)

pd.DataFrame(pred_dict)

"""Pada contoh prediksi untuk satu data uji dengan nilai sebenarnya (y_true) sebesar 7.1, model Random Forest (prediksi_RF) memprediksi skor fokus sebesar 7.0, sedangkan model Linear Regression (prediksi_LR) memprediksi sebesar 7.1. Hasil ini menunjukkan bahwa prediksi Linear Regression lebih mendekati nilai aktual dibandingkan dengan Random Forest."""